# .github/workflows/deploy.yml
name: 🚀 Deploy TTN Festival Tanzplan Generator

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'k8s/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ttn-tanzplan-generator
  KUBE_NAMESPACE: ttn-tanzplan

jobs:
  # Job 1: Build und Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 🔍 Run Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 2: Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy == true
      
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
      
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: 🔐 Configure Kubernetes Context
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        kubectl config current-context
        
    - name: 🏗️ Create Namespace
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }}-staging --dry-run=client -o yaml | kubectl apply -f -
        
    - name: 📝 Generate Kubernetes Manifests
      run: |
        # Ersetze Platzhalter in den K8s Manifesten
        sed -i "s|IMAGE_PLACEHOLDER|${{ needs.build-and-test.outputs.image-tag }}|g" k8s/staging/*.yaml
        sed -i "s|NAMESPACE_PLACEHOLDER|${{ env.KUBE_NAMESPACE }}-staging|g" k8s/staging/*.yaml
        sed -i "s|DOMAIN_PLACEHOLDER|staging.tanzplan.der-ttn.de|g" k8s/staging/*.yaml
        
    - name: 🚀 Deploy to Staging
      run: |
        kubectl apply -f k8s/staging/ -n ${{ env.KUBE_NAMESPACE }}-staging
        kubectl rollout status deployment/ttn-tanzplan-generator -n ${{ env.KUBE_NAMESPACE }}-staging --timeout=300s
        
    - name: 🔍 Verify Deployment
      run: |
        kubectl get pods,svc,ingress -n ${{ env.KUBE_NAMESPACE }}-staging
        kubectl wait --for=condition=ready pod -l app=ttn-tanzplan-generator -n ${{ env.KUBE_NAMESPACE }}-staging --timeout=300s
        
    - name: 🧪 Run Health Check
      run: |
        # Port-forward für Health Check
        kubectl port-forward svc/ttn-tanzplan-generator 8080:80 -n ${{ env.KUBE_NAMESPACE }}-staging &
        sleep 10
        curl -f http://localhost:8080 || exit 1
        echo "✅ Health check passed"

  # Job 3: Deploy zu Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy == true
    environment: 
      name: production
      url: https://tanzplan.ttn-nord.de
      
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: 🔐 Configure Kubernetes Context
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        kubectl config current-context
        
    - name: 🏗️ Create Namespace
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: 📝 Generate Kubernetes Manifests
      run: |
        sed -i "s|IMAGE_PLACEHOLDER|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/production/*.yaml
        sed -i "s|NAMESPACE_PLACEHOLDER|${{ env.KUBE_NAMESPACE }}|g" k8s/production/*.yaml
        sed -i "s|DOMAIN_PLACEHOLDER|tanzplan.der-ttn.de|g" k8s/production/*.yaml
        
    - name: 🚀 Deploy to Production
      run: |
        kubectl apply -f k8s/production/ -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout status deployment/ttn-tanzplan-generator -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
        
    - name: 🔍 Verify Production Deployment
      run: |
        kubectl get pods,svc,ingress -n ${{ env.KUBE_NAMESPACE }}
        kubectl wait --for=condition=ready pod -l app=ttn-tanzplan-generator -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
        
    - name: 🧪 Production Health Check
      run: |
        sleep 30  # Warte auf Ingress
        curl -f https://tanzplan.der-ttn.de || exit 1
        echo "✅ Production deployment successful"
        
    - name: 📢 Notify Success
      if: success()
      run: |
        echo "🎉 TTN Festival Tanzplan Generator erfolgreich deployed!"
        echo "🌐 URL: https://tanzplan.der-ttn.de"

  # Job 3: Cleanup alte Images
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🗑️ Delete Old Container Images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ttn-tanzplan-generator
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true